@page "/account/login"
@inject EntryNow.Web.Services.Interface.IAccountService AccountService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.fakeToken" class="form-control" />
                <ValidationMessage For="@(() => model.fakeToken)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.fakeToken" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.fakeToken)" />
            </div>
            <br />
            <div class="col text-center span2">
                <button disabled="@loading" class="btn btn-primary" style="width:40%;">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private EntryNow.Web.Models.Token model = new EntryNow.Web.Models.Token();
    private bool loading;

    private async void OnValidSubmit()
    {
        
    }
    //{
    //    // reset alerts on submit
    //    AlertService.Clear();

    //    loading = true;
    //    try
    //    {
    //        bool login = await AccountService.Login(model);
    //        if (login)
    //        {
    //            await Task.Delay(3000);
    //            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
    //            NavigationManager.NavigateTo(returnUrl);
    //        }
    //        else
    //        {
    //            AlertService.Error("Username or password is incorrect");
    //            loading = false;
    //            StateHasChanged();
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        AlertService.Error(ex.Message);
    //        loading = false;
    //        StateHasChanged();
    //    }
    //}
}