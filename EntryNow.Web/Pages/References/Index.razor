@page "/references/index"
@attribute [Authorize]
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject PageNumberHelper PageNumberHelper
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime;

    <!-- Content Header (Page header) -->
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>All References</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a href="#">Home</a></li>
              <li class="breadcrumb-item active">List of all the References</li>
              &nbsp;&nbsp;
                    <a href="#" style="float:right; color:grey;" @onclick:preventDefault data-toggle="modal" data-target="#modal-default-search">
                        <i class="fas fa-search"></i>
                    </a>
                    @if (isOnSearch)
                    {
                        <a href="#" style="float:right;" @onclick:preventDefault @onclick="@(() => ClearSearch())">
                            &nbsp;Clear Search
                        </a>
                    }
            </ol>
          </div>
        </div>
      </div><!-- /.container-fluid -->
    </section>

    <!-- Main content -->
    <section class="content">
      <div class="container-fluid">
          <!-- /.col -->
            <div class="card">
              <div class="card-header">
                  @*<NavLink href="#">*@
                      <a style="float:left; color:grey;">View all the References!</a>
                  @*</NavLink>*@
                    @if (totalReferences != 0)
                    {
                        <a href="#" style="float:right; color:grey;"><i class="fas fa-download"></i></a>
                        <a style="float:right; color:grey;">Total @totalReferences References Found&nbsp;&nbsp;</a>
                    }
              </div>
              <!-- /.card-header -->
              <div class="card-body table-responsive p-0">
                <table class="table text-nowrap">
                  <thead>
                    <tr>
                      <th></th>
                      <th>Name</th>
                      <th>Surname</th>
                      <th>Contact</th>
                      <th>Referenced By</th>
                      <th>Recommended</th>
                      <th>UC</th>
                      <th>Taluka</th>
                      <th>Village</th>
                      <th>City</th>
                      <th>Address</th>
                      <th></th>
                    </tr>
                  </thead>
                  <tbody>
                      @if (loading)
                      {
                          <tr>
                              <td colspan="12" class="text-center">
                                  <span class="spinner-border spinner-border-lg align-center"></span>
                              </td>
                          </tr>
                      }
                      else
                      {
                          @if (entries != null)
                          {
                              foreach (var entrie in entries)
                              {
                                  <tr>
                                      <td>
                                            <a href="" @onclick="@(() => AddByThis(@entrie.Id.ToString() + "/" + @entrie.Name))" @onclick:preventDefault>
                                                <i class="far fa-plus" style="color:white; background-color:black"></i>
                                            </a>
                                      </td>
                                      <td>@entrie.Name</td>
                                      <td>@entrie.Surname</td>
                                      <td>@entrie.ContactNumber</td>
                                      <td>@entrie.ReferencedBy</td>
                                      <td>@entrie.Recommended</td>
                                      <td>@entrie.UnionCounsil</td>
                                      <td>@entrie.Taluka</td>
                                      <td>@entrie.Village</td>
                                      <td>@entrie.City</td>
                                      <td>@entrie.Address</td>
                                      <td style="white-space: nowrap">
                                            <a href="" @onclick="@(() => EditBtn(@entrie.Id))" @onclick:preventDefault>
                                                <i class="far fa-edit" style="color:blue;"></i>
                                            </a>
                                      </td>
                                  </tr>
                              }
                          }
                      }
                  </tbody>
                </table>
              </div>
            <!-- pagination -->
            @if (totalPages > 0)
            {
            <div class="card-footer clearfix">
                <div class="col-md-12">
                    Page @_page of @totalPages Selected
                    <ul class="pagination pagination-sm m-0 float-right">
                        @if (_page == 1)
                        {
                            <li class="page-item disabled"><a class="page-link" @onclick="GetDataOnPreviousPage">&laquo;</a></li>
                        }
                        @if (_page != 1)
                        {
                            <li class="page-item"><a class="page-link" @onclick="GetDataOnPreviousPage" href="" @onclick:preventDefault>&laquo;</a></li>
                            <li class="page-item"><a class="page-link" @onclick="GetDataOnPreviousPage" href="" @onclick:preventDefault>...</a></li>
                        }
                        @if (totalPages > 0)
                        {
                            @for (int i = _page - 1; i < _page + 2 ; i++)
                            {
                                int buttonNumber = i;
                                @if (buttonNumber < 1 || buttonNumber > totalPages)
                                {
                                }
                                else
                                {
                                    @if (buttonNumber == _page)
                                    {
                                            <li class="page-item active"><a class="page-link" @onclick="@(() => GetDataByPageNumber(buttonNumber))" href="" @onclick:preventDefault>@i</a></li>
                                    }
                                    else
                                    {
                                            <li class="page-item"><a class="page-link" @onclick="@(() => GetDataByPageNumber(buttonNumber))" href="" @onclick:preventDefault>@i</a></li>
                                    }
                                }
                            }
                        }
                        @if (_page == totalPages)
                        {
                            <li class="page-item disabled"><a class="page-link" @onclick="GetDataOnNextPage">&raquo;</a></li>
                        }
                        @if (_page != totalPages)
                        {
                            <li class="page-item"><a class="page-link" @onclick="GetDataOnNextPage" href="" @onclick:preventDefault>...</a></li>
                            <li class="page-item"><a class="page-link" @onclick="GetDataOnNextPage" href="" @onclick:preventDefault>&raquo;</a></li>
                        }
                    </ul>
                </div>
                <div class="col-md-12" style="display:inline-block;">
                        <input type="number" min="1" style="width:12%; float:right; margin-top:5px;" class="form-control select2" @oninput="(e)=> RenderToPage(e.Value.ToString())" placeholder="Go To Page">
                        @if (!string.IsNullOrEmpty(renderToPageError) || !string.IsNullOrWhiteSpace(renderToPageError))
                        {
                            <label style="color:red; float:right; margin-top:10px;">@renderToPageError</label>
                        }
                </div>
            </div>
            }
            </div>
            <!-- /.card -->
          <!-- /.col -->
      </div><!-- /.container-fluid -->
    </section>

    <!-- Pop Up for Search Btn -->
    <section class="content">
        <div class="modal fade" id="modal-default-search">
            <div class="modal-dialog" style="max-width: 80%;" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Search Reference : </h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@model">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Name</label>
                                        <InputText @bind-Value="model.Name" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Surname</label>
                                        <InputText @bind-Value="this.surnameValue" class="form-control select2" @oninput="(e)=> AutoCompleteSurname(e.Value.ToString())" list="_surname" />
                                        <datalist id="_surname">
                                            @if (surnamesSearchList != null)
                                            {
                                                @foreach (var item in surnamesSearchList)
                                                {
                                                    <option value="@item.Value">@item.Value</option>
                                                }
                                            }
                                        </datalist>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Contact Number</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                            </div>
                                            <InputText @bind-Value="model.ContactNumber" class="form-control" data-inputmask='"mask": "0399-999 9999"' data-mask />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Village</label>
                                        <InputText @bind-Value="this.villageValue" class="form-control select2" @oninput="(e)=> AutoCompleteVillage(e.Value.ToString())" list="_village" />
                                        <datalist id="_village">
                                            @if (villagesSearchList != null)
                                            {
                                                @foreach (var item in villagesSearchList)
                                                {
                                                    <option value="@item.Value">@item.Value</option>
                                                }
                                            }
                                        </datalist>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label>Union Council</label>
                                        <InputText @bind-Value="this.ucValue" class="form-control select2" @oninput="(e)=> AutoCompleteUC(e.Value.ToString())" list="_uc" />
                                        <datalist id="_uc">
                                            @if (ucsSearchList != null)
                                            {
                                                @foreach (var item in ucsSearchList)
                                                {
                                                    <option value="@item.Value">@item.Value</option>
                                                }
                                            }
                                        </datalist>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                      <label>Taluka</label>
                                      <InputText @bind-Value="this.talukaValue" class="form-control select2" @oninput="(e)=> AutoCompleteTaluka(e.Value.ToString())" list="_taluka"/>
                                          <datalist id="_taluka">
                                            @if (talukaSearchList != null)
                                            {
                                                @foreach (var item in talukaSearchList)
                                                {
                                                    <option value="@item.Value">@item.Value</option>
                                                }
                                            }
                                          </datalist>
                                  </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                          <label>City</label>
                                          <InputText @bind-Value="this.cityValue" class="form-control select2" @oninput="(e)=> AutoCompleteCity(e.Value.ToString())" list="_city"/>
                                              <datalist id="_city">
                                                @if (citySearchList != null)
                                                {
                                                    @foreach (var item in citySearchList)
                                                    {
                                                        <option value="@item.Value">@item.Value</option>
                                                    }
                                                }
                                              </datalist>
                                      </div>
                                  </div>
                                  <div class="col-md-8">
                                  <div class="form-group">
                                          <label>Complete Address</label>
                                          <InputText @bind-Value="model.Address" class="form-control" />
                                          <ValidationMessage For="@(() => model.Address)" />
                                  </div>
                                  </div>
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer justify-content-between">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@(() => GetSearchData(_page))">Search</button>
                    </div>
                </div>
            </div>
        </div>
    </section>

@code {
    References model = new References();
    private int _page = 1;
    private int pageSize = 10;
    private int totalReferences;
    private bool loading;
    private IList<References> entries;
    private int totalPages;
    private string renderToPageError="";
    private bool isOnSearch = false;
    private string baseUrl = "https://entrynowapi.azurewebsites.net/api/";

    private string query = string.Empty;
    private string surnameValue = "";
    private string ucValue = "";
    //private string referenceValue = "";
    private string villageValue = "";
    private string talukaValue = "";
    private string cityValue = "";
    private IList<SearchValues> surnamesSearchList;
    private IList<SearchValues> ucsSearchList;
    private IList<SearchValues> villagesSearchList;
    private IList<SearchValues> talukaSearchList;
    //private IList<SearchValues> referencesSearchList;
    private IList<SearchValues> citySearchList;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        _page = await PageNumberHelper.GetReferencesPageNo();
        await GetData();
        await GetReferencesCount();
        loading = false;
    }

    private async Task GetSearchData(int pageNumber)
    {
        this.totalPages = 0;
        isOnSearch = true;

        loading = true;
        _page = pageNumber;
        await GetData();
        await GetReferencesCount();

        loading = false;
        StateHasChanged();

        model.Name = "";
        this.surnameValue = "";
        model.ContactNumber = "";
        model.Address = "";
        this.villageValue = "";
        //this.referenceValue = "";
        this.ucValue = "";
        this.talukaValue = "";
        this.cityValue = "";
        StateHasChanged();
    }

    private async Task ClearSearch()
    {
        this.totalPages = 0;
        model.Name = "";
        //model.ReferenceId = null;
        model.ContactNumber = null;
        model.SurnameId = null;
        model.UnionCounsilId = null;
        model.VillageId = null;
        model.Address = null;
        model.TalukaId = null;
        model.CityId = null;

        isOnSearch = false;
        loading = true;
        _page = 1;
        await GetData();
        await GetReferencesCount();
        loading = false;
        StateHasChanged();
    }

    private async Task AutoCompleteSurname(string value)
    {
        if (!string.IsNullOrEmpty(value) && value.Length >= 3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "surname/find?name=" + value))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.surnamesSearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch (Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task AutoCompleteUC(string value)
    {
        if (!string.IsNullOrEmpty(value) && value.Length >= 3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "unioncounsil/find?name=" + value))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.ucsSearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch (Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task AutoCompleteVillage(string value)
    {
        if (!string.IsNullOrEmpty(value) && value.Length >= 3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "village/find?name=" + value))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.villagesSearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch (Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task AutoCompleteTaluka(string value)
    {
        if (!string.IsNullOrEmpty(value) && value.Length >= 3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/find?name=" + value))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.talukaSearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch (Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    private async Task AutoCompleteCity(string value)
    {
        if (!string.IsNullOrEmpty(value) && value.Length >=3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "city/find?name=" + value))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.citySearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch(Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    //private async Task AutoCompleteReference(string value)
    //{
    //    if (!string.IsNullOrEmpty(value) && value.Length >= 3)
    //    {
    //        try
    //        {
    //            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
    //            {
    //                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "reference/find?name=" + value))
    //                {
    //                    string apiResponse = await response.Content.ReadAsStringAsync();
    //                    this.referencesSearchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
    //                }
    //            }
    //        }
    //        catch (Exception e)
    //        {
    //            AlertService.Error(e.Message);
    //            loading = false;
    //            StateHasChanged();
    //        }
    //    }
    //}

    private async Task GetDataOnNextPage()
    {
        loading = true;
        _page += 1;
        await GetData();
        loading = false;
    }

    private async Task GetDataByPageNumber(int pageNumber)
    {
        loading = true;
        _page = pageNumber;
        await GetData();
        loading = false;
    }

    private async Task GetDataOnPreviousPage()
    {
        loading = true;
        _page -= 1;
        await GetData();
        loading = false;
    }

    private async Task GetData()
    {
        //if (!string.IsNullOrEmpty(referenceValue))
        //{
        //    if (referencesSearchList == null)
        //    {
        //        //AlertService.Error("Incorrect Reference Entered!");
        //    }
        //    foreach (var item in referencesSearchList)
        //    {
        //        if (item.Value == referenceValue)
        //        {
        //            model.ReferenceId = item.Id;
        //        }
        //        else
        //        {
        //            //AlertService.Error("Incorrect Reference Entered!");
        //        }
        //    }
        //}
        //else
        //    model.ReferenceId = null;

        if (!string.IsNullOrEmpty(surnameValue))
        {
            if (surnamesSearchList == null)
            {
                AlertService.Error("Incorrect Surname Entered!");
            }
            foreach (var item in surnamesSearchList)
            {
                if (item.Value == surnameValue)
                {
                    model.SurnameId = item.Id;
                }
                else
                {
                    //AlertService.Error("Incorrect Surname Entered!");
                }
            }
        }
        else
            model.SurnameId = null;

        if (!string.IsNullOrEmpty(ucValue))
        {
            if (ucsSearchList == null)
            {
                //AlertService.Error("Incorrect Union Counsil Entered!");
            }
            foreach (var item in ucsSearchList)
            {
                if (item.Value == ucValue)
                {
                    model.UnionCounsilId = item.Id;
                }
                else
                {
                    //AlertService.Error("Incorrect Union Counsil Entered!");
                }
            }
        }
        else
            model.UnionCounsilId = null;

        if (!string.IsNullOrEmpty(talukaValue))
        {
            if (talukaSearchList == null)
            {
                //AlertService.Error("Incorrect Village Name Entered!");
            }
            foreach (var item in talukaSearchList)
            {
                if (item.Value == talukaValue)
                {
                    model.TalukaId = item.Id;
                }
                else
                {
                    //AlertService.Error("Incorrect Village Name Entered!");
                }
            }
        }
        else
        {
            model.TalukaId = null;
        }

        if (!string.IsNullOrEmpty(cityValue))
        {
            if (citySearchList == null)
            {
                //AlertService.Error("Incorrect Village Name Entered!");
            }
            foreach (var item in citySearchList)
            {
                if (item.Value == cityValue)
                {
                    model.CityId = item.Id;
                }
                else
                {
                    //AlertService.Error("Incorrect Village Name Entered!");
                }
            }
        }
        else
        {
            model.VillageId = null;
        }

        if (!string.IsNullOrEmpty(villageValue))
        {
            if (villagesSearchList == null)
            {
                //AlertService.Error("Incorrect Village Name Entered!");
            }
            foreach (var item in villagesSearchList)
            {
                if (item.Value == villageValue)
                {
                    model.VillageId = item.Id;
                }
                else
                {
                    //AlertService.Error("Incorrect Village Name Entered!");
                }
            }
        }
        else
        {
            model.VillageId = null;
        }

        try
        {
            query = null;

            query = "reference/get?pageNumber=" + _page + "&perPage=" + pageSize + "&";

            @if (!string.IsNullOrWhiteSpace(model.Name))
                query += "name=" + model.Name + "&";

            //@if (model.ReferenceId != null && model.ReferenceId > 0)
            //    query += "referenceId=" + model.ReferenceId + "&";

            @if (!string.IsNullOrWhiteSpace(model.ContactNumber))
                query += "contactNumber=" + model.ContactNumber + "&";

            @if (model.SurnameId != null && model.SurnameId > 0)
                query += "surnameId=" + model.SurnameId + "&";

            @if (model.VillageId != null && model.VillageId > 0)
                query += "villageId=" + model.VillageId + "&";

            @if (model.TalukaId != null && model.TalukaId > 0)
                query += "TalukaId=" + model.TalukaId + "&";

            @if (model.CityId != null && model.CityId > 0)
                query += "CityId=" + model.CityId + "&";

            @if (model.UnionCounsilId != null && model.UnionCounsilId > 0)
                query += "unionCounsilId=" + model.UnionCounsilId + "&";

            @if (!string.IsNullOrWhiteSpace(model.Address))
                query += "Address=" + model.Address;

            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + query))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    entries = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<References>>(apiResponse);
                }
            }
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GetReferencesCount()
    {
        try
        {
            query = null;

            query = "?";

            string name = model.Name;

            @if (!string.IsNullOrWhiteSpace(name))
                query += "name=" + model.Name + "&";

            //@if (model.ReferenceId != null && model.ReferenceId > 0)
            //    query += "referenceId=" + model.ReferenceId + "&";

            @if (!string.IsNullOrWhiteSpace(model.ContactNumber))
                query += "contactNumber=" + model.ContactNumber + "&";

            @if (model.SurnameId != null && model.SurnameId > 0)
                query += "surnameId=" + model.SurnameId + "&";

            @if (model.VillageId != null && model.VillageId > 0)
                query += "villageId=" + model.VillageId + "&";

            @if (model.TalukaId != null && model.TalukaId > 0)
                query += "TalukaId=" + model.TalukaId + "&";

            @if (model.CityId != null && model.CityId > 0)
                query += "CityId=" + model.CityId + "&";

            @if (model.UnionCounsilId != null && model.UnionCounsilId > 0)
                query += "unionCounsilId=" + model.UnionCounsilId + "&";

            @if (!string.IsNullOrWhiteSpace(model.Address))
                query += "Address=" + model.Address;

            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "/reference/get/count" + query))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    totalReferences = Int32.Parse(apiResponse);
                    totalPages = (int)Math.Ceiling((decimal)totalReferences / (decimal)pageSize);
                }
            }
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async void EditBtn(int id)
    {
        await PageNumberHelper.SaveReferencesPageNo(_page);
        string url = $"entries/edit/{id}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async void AddByThis(string val)
    {
        await PageNumberHelper.SaveReferencesPageNo(_page);
        string url = $"entries/addByRef/{val}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task RenderToPage(string val)
    {
        if (string.IsNullOrEmpty(val))
        {
            renderToPageError = "";
            loading = true;
            _page = 1;
            await GetData();
            await GetReferencesCount();
            loading = false;
            StateHasChanged();
        }
        else if (Int32.Parse(val) > totalPages)
        {
            renderToPageError = $"Page Number must be less then {totalPages}.";
            StateHasChanged();
        }
        else if (Int32.Parse(val) <= 0)
        {
            renderToPageError = "Page Number must be positive.";
            StateHasChanged();
        }
        else if(Int32.Parse(val) > 0)
        {
            renderToPageError = "";
            loading = true;
            _page = Int32.Parse(val);
            await GetData();
            await GetReferencesCount();
            loading = false;
            StateHasChanged();
        }
    }
}