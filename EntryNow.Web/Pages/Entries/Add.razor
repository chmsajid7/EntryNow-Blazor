@page "/entries/add"
@attribute [Authorize]
@inject EntryNow.Web.Services.Interface.IAlertService AlertService
@inject NavigationManager NavigationManager

<h1>New Entry</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    @if (villages != null)
    {
        <div class="form-row">
            <div class="form-group col">
                <label>Name</label>
                <InputText @bind-Value="model.Name" class="form-control" />
                <ValidationMessage For="@(() => model.Name)" />
            </div>
            <div class="form-group col">
                <label>Surname</label>
                <select class="form-control" @bind="model.SurnameId">
                    <option value=""></option>
                    @foreach(var item in surnames)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
            <div class="form-group col">
                <label>Contact Number</label>
                <InputText @bind-Value="model.ContactNumber" class="form-control" />
                <ValidationMessage For="@(() => model.ContactNumber)" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col">
                <label>Email</label>
                <InputText @bind-Value="model.EmailAddress" class="form-control" />
                <ValidationMessage For="@(() => model.EmailAddress)" />
            </div>
            <div class="form-group col">
                <label>CNIC</label>
                <InputText @bind-Value="model.CNIC" class="form-control" />
                <ValidationMessage For="@(() => model.CNIC)" />
            </div>
            <div class="form-group col">
                <label>District</label>
                <select class="form-control" @bind="model.DistrictId">
                    <option value=""></option>
                    @foreach(var item in districts)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col">
                <label>Taluka</label>
                <select class="form-control" @bind="model.TalukaId">
                    <option value=""></option>
                    @foreach(var item in talukas)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
            <div class="form-group col">
                <label>Union Counsil</label>
                <select class="form-control" @bind="model.UnionCounsilId">
                    <option value=""></option>
                    @foreach(var item in unioncounsils)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
            <div class="form-group col">
                <label>Deh</label>
                <select class="form-control" @bind="model.DehId">
                    <option value=""></option>
                    @foreach(var item in dehs)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group col">
                <label>City</label>
                <select class="form-control" @bind="model.CityId">
                    <option value=""></option>
                    @foreach(var item in cities)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
            <div class="form-group col">
                <label>Village</label>
                <select class="form-control" @bind="model.VillageId">
                    <option value=""></option>
                    @foreach(var item in villages)
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col">
                <label>Address</label>
                <InputText @bind-Value="model.Address" class="form-control" />
                <ValidationMessage For="@(() => model.Address)" />
            </div>
        </div>

        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Submit
            </button>
            <NavLink href="entries/index" class="btn btn-link">Cancel</NavLink>
        </div>
    }
    @if (loading)
    {
        <tr>
            <td colspan="12" class="text-center">
                <span class="spinner-border spinner-border-lg align-center"></span>
            </td>
        </tr>
    }
</EditForm>

@code {
    private Entries_ViewModel model = new Entries_ViewModel();
    private IList<DropDowns> cities;
    private IList<DropDowns> dehs;
    private IList<DropDowns> districts;
    private IList<DropDowns> surnames;
    private IList<DropDowns> talukas;
    private IList<DropDowns> unioncounsils;
    private IList<DropDowns> villages;
    private string baseUrl = "https://entrynowapi.azurewebsites.net/api/";
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await FillDropDowns();
        loading = false;
    }
    private async Task FillDropDowns()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "city/dropdown")) 
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.cities = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "deh/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.dehs = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "district/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.districts = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "surname/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.surnames = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.talukas = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "unioncounsil/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.unioncounsils = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "village/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.villages = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }
    private async void OnValidSubmit()
    {
        AlertService.Clear();
        loading = true;
        try
        {
            await AddEntryAsync();
            AlertService.Success("New Entry Added Successfully", keepAfterRouteChange: true);
            await Task.Delay(3000);
            NavigationManager.NavigateTo("entries/index");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
    private async Task AddEntryAsync()
    {
        using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
        {
            var postData = Newtonsoft.Json.JsonConvert.SerializeObject(model);
            var content = new System.Net.Http.StringContent(postData, System.Text.Encoding.UTF8, "application/json");
            using (System.Net.Http.HttpResponseMessage response = await httpClient.PutAsync(baseUrl + "voter/save", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
            }
        }
    }
}