@page "/"
@*@page "/entries/index"*@
@attribute [Authorize]
@inject EntryNow.Web.Services.Interface.IAccountService AccountService

<h1>Entries</h1>
<NavLink href="users/add" class="btn btn-sm btn-success mb-2">
    <span class="oi oi-plus" aria-hidden="true"></span>  New Entries
</NavLink>
<table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 30%">First Name</th>
            <th style="width: 30%">Last Name</th>
            <th style="width: 30%">Username</th>
            <th style="width: 10%"></th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Username</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"users/edit/{user.Id}")" class="btn btn-sm btn-primary mr-1">Edit</NavLink>
                        <button @onclick="@(() => DeleteUser(user.Id))" disabled="@user.IsDeleting" class="btn btn-sm btn-danger btn-delete-user">
                            @if (user.IsDeleting)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                            }
                            else
                            {
                                <span>Delete</span>
                            }
                        </button>
                    </td>
                </tr>
            }
        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool loading;
    private IList<User> users;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetData();
        loading = false;
    }

    private async Task GetData()
    {
        users = await AccountService.GetAll();

        System.Net.Http.HttpClient client = new System.Net.Http.HttpClient();
        client.BaseAddress = new Uri("https://entrynowapi.azurewebsites.net/api/");
        // Add an Accept header for JSON format.
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

        string c = client.BaseAddress.AbsoluteUri;

        try
        {
            System.Net.Http.HttpResponseMessage response = await client.GetAsync("https://entrynowapi.azurewebsites.net/api/voter/get?pageNumber=1&perPage=2");
            //System.Net.Http.HttpResponseMessage response = client.GetAsync("voter/get?pageNumber=1&perPage=1000").Result;
        }
        catch(Exception eee)
        {
            
        }
        // List all Names.
        


        string a = "";

    }

    private async void DeleteUser(string id)
    {
        var user = users.First(x => x.Id == id);
        user.IsDeleting = true;
        await AccountService.Delete(id);
        users.Remove(user);
        StateHasChanged();
    }
}