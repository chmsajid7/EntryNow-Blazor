@page "/"
@*@page "/entries/index"*@
@attribute [Authorize]
@inject EntryNow.Web.Services.Interface.IAlertService AlertService

<h1>Entries</h1>
<NavLink href="entries/add" class="btn btn-sm btn-success mb-2">
    <span class="oi oi-plus" aria-hidden="true"></span>  New Entries
</NavLink>
<input class="form-control mb-4" id="searchInput" onkeyup="searchFunction()" type="text" placeholder="Search" style="width:20%; float: right;">
<div class="table-wrapper-scroll-y my-custom-scrollbar">
    <table class="table table-striped">
    <thead>
        <tr>
            <th style="width: 8%">Name</th>
            <th style="width: 8%">Surname</th>
            <th style="width: 8%">Contact</th>
            <th style="width: 8%">CNIC</th>
            <th style="width: 8%">Reference</th>
            <th style="width: 8%">Union Counsil</th>
            <th style="width: 8%">Taluka</th>
            <th style="width: 8%">Deh</th>
            <th style="width: 8%">Village</th>
            <th style="width: 8%">City</th>
            <th style="width: 10%">Address</th>
            <th style="width: 10%"></th>
        </tr>
    </thead>
    <tbody>
        @if (entries != null)
        {
            foreach (var entrie in entries)
            {
                <tr>
                    <td>@entrie.Name</td>
                    <td>@entrie.Surname</td>
                    <td>@entrie.ContactNumber</td>
                    <td>@entrie.CNIC</td>
                    <td>@entrie.Reference</td>
                    <td>@entrie.UnionCounsil</td>
                    <td>@entrie.Taluka</td>
                    <td>@entrie.Deh</td>
                    <td>@entrie.Village</td>
                    <td>@entrie.City</td>
                    <td>@entrie.Address</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"entries/edit/{entrie.Id}")" class="btn btn-sm btn-primary mr-1">Edit</NavLink>
                        <NavLink href="@($"users/edit/{entrie.Id}")" class="btn btn-sm btn-danger mr-1">Delete</NavLink>
@*                        <button @onclick="@(() => DeleteUser(entrie.Id))" disabled="@entrie.IsDeleting" class="btn btn-sm btn-danger btn-delete-user">
                            @if (entrie.IsDeleting)
                            {
                                <span class="spinner-border spinner-border-sm"></span>
                            }
                            else
                            {
                                <span>Delete</span>
                            }
                        </button>*@
                    </td>
                </tr>
            }
        }
        
        @if (loading)
        {
            <tr>
                <td colspan="12" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>
@if (totalPages > 0)
{
    <nav aria-label="...">
        <ul class="pagination justify-content-end">
            @if(page == 1)
            {
                <li class="page-item disabled">
                    <a class="page-link" @onclick="GetDataOnPreviousPage">Previous</a>
                </li>
            }
            @if(page != 1)
            {
                <li class="">
                    <a class="page-link" @onclick="GetDataOnPreviousPage">Previous</a>
                </li>
            }
@*            @if (page > 3)
            {
                <li class="">
                    <a class="page-link">...</a>
                </li>
            }*@
            @if (totalPages > 0)
            {
                @for (int i = 1; i <= totalPages; i++)
               {
                   int buttonNumber = i;
                   <li class="page-item">
                       <a class="page-link" @onclick="@(() => GetDataByPageNumber(buttonNumber))">@i</a>
                    </li>
               }
            }
@*            <li class="page-item"><a class="page-link" href="#">1</a></li>
            <li class="page-item active">
                <a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
            </li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>*@
            @if(page == totalPages)
            {
                <li class="page-item disabled">
                    <a class="page-link" @onclick="GetDataOnNextPage">Next</a>
                </li>
            }
            @if(page != totalPages)
            {
                <li class="page-item">
                    <a class="page-link" @onclick="GetDataOnNextPage">Next</a>
                </li>
            }
        </ul>
    </nav>
}

@code {
    private int page = 1;
    private int pageSize = 10;
    private bool loading;
    private IList<Entries> entries;
    private int totalPages;
    private readonly System.Net.Http.HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetData();
        await GetEntriesCount();
        loading = false;
    }

    private async Task GetDataOnNextPage()
    {
        loading = true;
        page += 1;
        await GetData();
        loading = false;
    }
    
    private async Task GetDataByPageNumber(int pageNumber)
    {
        loading = true;
        page = pageNumber;
        await GetData();
        loading = false;
    }
    
    private async Task GetDataOnPreviousPage()
    {
        loading = true;
        page -= 1;
        await GetData();
        loading = false;
    }

    private async Task GetData()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync("https://entrynowapi.azurewebsites.net/api/voter/get?pageNumber=" + page + "&perPage=" + pageSize))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    entries = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<Entries>>(apiResponse);
                }
            }
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async Task GetEntriesCount()
    {
        try
        {
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync("https://entrynowapi.azurewebsites.net/api/voter/get?pageNumber=" + 1 + "&perPage=" + 90000000))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    IList<Entries> _entries = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<Entries>>(apiResponse);
                    totalPages = (int)Math.Ceiling((decimal)_entries.Count() / (decimal)pageSize);
                }
            }
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private void DeleteUser(string id)
    {
        //var user = users.First(x => x.Id == id);
        //user.IsDeleting = true;
        //await AccountService.Delete(id);
        //users.Remove(user);
        //StateHasChanged();
    }
}