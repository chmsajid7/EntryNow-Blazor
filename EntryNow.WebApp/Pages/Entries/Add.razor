@page "/entries/add"
@using EntryNow.WebApp.Constants
@attribute [Authorize]
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>New Entry</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a href="#">Entries</a></li>
              <li class="breadcrumb-item active">Add New Enty</li>
            </ol>
          </div>
        </div>
      </div>
    </section>

    <section class="content">
      <div class="container-fluid">
        <div class="card card-default">
          <div class="card-header">
            <h3 class="card-title">Add Entry's details in the fields below</h3>
            <div class="card-tools">
              <button type="button" class="btn btn-tool" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
              </button>
              <button type="button" class="btn btn-tool" data-card-widget="remove">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>
          <div class="card-body">
              <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                @if (surnames != null)
                {
                       <div class="row">
                          <div class="col-md-4">
                              <div class="form-group">
                                  <label>Name</label>
                                  <InputText @bind-Value="model.Name" class="form-control" />
                                  <ValidationMessage For="@(() => model.Name)" />
                              </div>
                              <div class="form-group">
                                  <label>Email</label>
                                  <InputText @bind-Value="model.EmailAddress" class="form-control" />
                                  <ValidationMessage For="@(() => model.EmailAddress)" />
                              </div>
                              <div class="form-group">
                                  <label>Taluka</label>
                                  <select class="form-control select2" style="width: 100%;" @onchange="@FillUcDropDown">
                                        <option selected="selected">Select Taluka</option>
                                        @foreach(var taluka in talukas)
                                        {
                                            <option value="@taluka">@taluka</option>
                                        }
                                  </select>
                              </div>
                          </div>
                          <div class="col-md-4">
                              <div class="form-group">
                                  <label>Surname</label>
                                  <select class="form-control select2" style="width: 100%;" @bind="model.SurnameId">
                                        <option selected="selected">Select Surname</option>
                                        @foreach(var item in surnames)
                                        {
                                            <option value="@item.Id">@item.Value</option>
                                        }
                                  </select>
                              </div>
                              <div class="form-group">
                                  <label>CNIC</label>
                                  <InputText @bind-Value="model.CNIC" class="form-control" />
                                  <ValidationMessage For="@(() => model.CNIC)" />
                              </div>
                              <div class="form-group">
                                  <label>District</label>
                                  <select class="form-control select2" style="width: 100%;" @bind="model.District">
                                        <option selected="selected">Select District</option>
                                        @foreach(var district in districts)
                                        {
                                            <option value="@district">@district</option>
                                        }
                                  </select>
                              </div>
                          </div>
                          <div class="col-md-4">
                                <div class="form-group">
                                  <label>Contact Number</label>
                                  <div class="input-group">
                                    <div class="input-group-prepend">
                                      <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                    </div>
                                    <InputText @bind-Value="model.ContactNumber" class="form-control" data-inputmask='"mask": "0399-999 9999"' data-mask />
                                  </div>
                                </div>
                              <div class="form-group">
                                  <label>City</label>
                                  <select class="form-control select2" style="width: 100%;" @bind="model.City">
                                        <option selected="selected">Select City</option>
                                        @foreach(var city in cities)
                                        {
                                            <option value="@city">@city</option>
                                        }
                                  </select>
                              </div>
                              <div class="form-group">
                                  <label>Union Council</label>
                                  <select class="form-control select2" style="width: 100%;" @onchange="@FillVillagesDropDown" >
                                        <option selected="selected">Select UC</option>
                                        @foreach(var uc in unioncounsils)
                                        {
                                            <option value="@uc">@uc</option>
                                        }
                                  </select>
                              </div>
                          </div>
                       </div>
                       <div class="row">
                          <div class="col-md-4">
                              <div class="form-group">
                                  <label>Village</label>
                                  <select class="form-control select2" style="width: 100%;" @bind="model.Village">
                                        <option selected="selected">Select Village</option>
                                        @foreach(var village in villages)
                                        {
                                            <option value="@village">@village</option>
                                        }
                                  </select>
                              </div>
                          </div>
                          <div class="col-md-4">
                              <div class="form-group">
                                  <label>Reference</label>
                                  <InputText @bind-Value="this.referenceValue" class="form-control select2" @oninput="(e)=> AutoCompleteField(e.Value.ToString())" list="_ref"/>
                                      <datalist id="_ref">
                                        @if (searchList != null)
                                        {
                                            @foreach (var item in searchList)
                                            {
                                                <option value="@item.Value">@item.Value</option>
                                            }
                                        }
                                      </datalist>
                              </div>
                          </div>
                       </div>
                       <div class="row">
                           <div class="col-md-8">
                              <div class="form-group">
                                      <label>Complete Address</label>
                                      <InputText @bind-Value="model.Address" class="form-control" />
                                      <ValidationMessage For="@(() => model.Address)" />
                              </div>
                          </div>
                           <div class="col-md-4">
                              <div class="form-group">
                                    <NavLink href="entries/index" class="btn btn-link" style="float:right; margin-top:37px;">Cancel</NavLink>
                                    <button disabled="@loading" class="btn btn-primary" style="float:right; margin-top:37px;">
                                        @if (loading)
                                        {
                                            <span class="spinner-border spinner-border-sm mr-1"></span>
                                        }
                                        Submit
                                    </button>
                              </div>
                          </div>
                       </div>
                }
                @if (pageLoading)
                {
                    <tr>
                        <td colspan="12" class="text-center align-center">
                            <span class="spinner-border spinner-border-lg align-center"></span>
                        </td>
                    </tr>
                }
              </EditForm>
          </div>
        </div>
      </div>
    </section>

@code {
    private Entries_CreateViewModel model = new Entries_CreateViewModel();
    private string referenceValue = "";
    private IList<SearchValues> searchList;
    private IList<DropDowns> surnames;
    private List<string> cities = new List<string>();
    //private IList<DropDowns> dehs;
    private List<string> districts = new List<string>();
    private List<string> talukas = new List<string>();
    private List<string> unioncounsils = new List<string>();
    private List<string> villages = new List<string>();
    private string baseUrl = "https://entrynowapi.azurewebsites.net/api/";
    private bool loading;
    private bool pageLoading;

    protected override async Task OnInitializedAsync()
    {
        pageLoading = true;
        districts.AddRange(Global.Districts);
        talukas.AddRange(Global.Talukas);
        cities.AddRange(Global.Cities);
        await FillDropDowns();
        pageLoading = false;
    }

    private async Task AutoCompleteField(string refName)
    {
        if (!string.IsNullOrEmpty(refName) && refName.Length >=3)
        {
            try
            {
                using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
                {
                    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "reference/find?name=" + refName))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        this.searchList = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<SearchValues>>(apiResponse);
                    }
                }
            }
            catch(Exception e)
            {
                AlertService.Error(e.Message);
                loading = false;
                StateHasChanged();
            }
        }
    }

    private void FillUcDropDown (ChangeEventArgs e)
    {
        model.Taluka = e.Value.ToString();
        if(model.Taluka == "Hala")
        {
            unioncounsils.AddRange(Global.UnionCounsil_Hala);
        }
        if(model.Taluka == "Saeedabad")
        {
            unioncounsils.AddRange(Global.UnionCounsil_Saeedabad);
        }
        if(model.Taluka == "Matiari")
        {
            unioncounsils.AddRange(Global.UnionCounsil_Matiari);
        }
    }
    private void FillVillagesDropDown (ChangeEventArgs e)
    {
        model.UnionCouncil = e.Value.ToString();
        if(model.UnionCouncil == "Khandu")
        {
            villages.AddRange(Global.Villages_Khandu);   
        }
        if(model.UnionCouncil == "Karam Khan Nizamani")
        {
            villages.AddRange(Global.Villages_KaramKhanNizamani);   
        }
        if(model.UnionCouncil == "Ajan Shah")
        {
            villages.AddRange(Global.Villages_AjanShah);   
        }
        if(model.UnionCouncil == "Bhanoth")
        {
            villages.AddRange(Global.Villages_Bhanoth);   
        }
        if(model.UnionCouncil == "Bhit Shah")
        {
            villages.AddRange(Global.Villages_BhitShah);   
        }
        if(model.UnionCouncil == "Fateh Muhammad Shah Ajnani")
        {
            villages.AddRange(Global.Villages_FatehMuhammadShahAjnani);   
        }
        if(model.UnionCouncil == "Abdul Wahid Burira")
        {
            villages.AddRange(Global.Villages_AbdulWahidBurira);   
        }
        if(model.UnionCouncil == "BD Kaka")
        {
            villages.AddRange(Global.Villages_BDKaka);   
        }
        if(model.UnionCouncil == "Faqeerabad")
        {
            villages.AddRange(Global.Villages_Faqeerabad);   
        }
        if(model.UnionCouncil == "Makhdoom joon Landhiyoon")
        {
            villages.AddRange(Global.Villages_MakhdoomjoonLandhiyoon);   
        }
        if(model.UnionCouncil == "Old Saeedabad")
        {
            villages.AddRange(Global.Villages_OldSaeedabad);   
        }
        if(model.UnionCouncil == "Ramzan Unar")
        {
            villages.AddRange(Global.Villages_RamzanUnar);   
        }
        if(model.UnionCouncil == "Shahmir Rahu")
        {
            villages.AddRange(Global.Villages_ShahmirRahu);   
        }
        if(model.UnionCouncil == "Sikandarabad")
        {
            villages.AddRange(Global.Villages_Sikandarabad);   
        }
        if(model.UnionCouncil == "Zair Peer")
        {
            villages.AddRange(Global.Villages_ZairPeer);   
        }
    }
    private async Task FillDropDowns()
    {
        try
        {
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "city/dropdown")) 
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.cities = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "deh/dropdown"))
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.dehs = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "district/dropdown"))
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.districts = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
            using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            {
                using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "surname/dropdown"))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    this.surnames = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
                }
            }
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "taluka/dropdown"))
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.talukas = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "unioncounsil/dropdown"))
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.unioncounsils = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
            //using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
            //{
            //    using (System.Net.Http.HttpResponseMessage response = await httpClient.GetAsync(baseUrl + "village/dropdown"))
            //    {
            //        string apiResponse = await response.Content.ReadAsStringAsync();
            //        this.villages = Newtonsoft.Json.JsonConvert.DeserializeObject<IList<DropDowns>>(apiResponse);
            //    }
            //}
        }
        catch(Exception e)
        {
            AlertService.Error(e.Message);
            loading = false;
            StateHasChanged();
        }
    }
    private async void OnValidSubmit()
    {
        AlertService.Clear();
        loading = true;
        try
        {
            await AddEntryAsync();
            AlertService.Success("New Entry Added Successfully", keepAfterRouteChange: true);
            await Task.Delay(2000);
            NavigationManager.NavigateTo("entries/index");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
    private async Task AddEntryAsync()
    {
        if (!string.IsNullOrEmpty(referenceValue))
        {
            foreach(var item in searchList)
            {
                if(item.Value == referenceValue)
                {
                    model.ReferenceId = item.Id;
                }
            }
        }
        using (System.Net.Http.HttpClient httpClient = new System.Net.Http.HttpClient())
        {
            var postData = Newtonsoft.Json.JsonConvert.SerializeObject(model);
            var content = new System.Net.Http.StringContent(postData, System.Text.Encoding.UTF8, "application/json");
            using (System.Net.Http.HttpResponseMessage response = await httpClient.PutAsync(baseUrl + "voter/save", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
            }
        }
    }
}